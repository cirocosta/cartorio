VALUES

	- *fast*
	- trivial to set up
	- small footprint


TODO

	- [x] /_live
	- [x] GET /v2
	- [ ] structured logging ("zero-cost"?)
	- [ ] untar'ing of images that have been `docker save`d
	- [ ] /v2/<name>/manifests/<reference>

		- [x] path segmentation
			- `split` on `/`, then manually perform the parsing

				1. go until the last one
				2. the last is the reference	(KEEP TRACK OF IT)
				3. one before the last is just `manifests`
				4. everything before `manifests` until the `first` (`/v2`) is the name.
								(KEEP TRACK OF IT)


		- [ ] how are we going to store this on the filesystem?
			- do images come with this? *probably*

		- [ ] GET
		- [ ] HEAD


CLI

	cartorio \
		--address ? \
		--image /images/something.tar \
		--image /images/something-else.tar \
		--images-dir /other-images \
		--assets-dir /assets

		??


SERVER

	SPEC

		https://github.com/opencontainers/distribution-spec/blob/master/spec.md


	1. support `docker pull`	

		> An "image" is a combination of a JSON manifest and individual layer files.
			> Layers are stored in as blobs in the V2 registry API, keyed by their digest
		> The process of pulling an image centers around retrieving these two components.

		docker pull localhost:5000/file

				
			VERSION CHECK

			Provide version support information based on its response statuses.


				-> GET /v2

					<- 200 OK
					X-Content-Type-Options: nosniff
					Docker-Distribution-Api-Version: registry/2.0 -------->  the "Docker-Distribution-API-Version" 
												 header SHOULD be set to "registry/2.0".

						{}


			    		   max size: 256; each field adhering to regex [a-z0-9]+(?:[._-][a-z0-9]+)*
					   .---.                
					   |   |                
					   | .-+-----------------> repository name (could be `foo/bar[/...]` as well)
					   | | |            .----> tag
					   | | |            |   
				-> GET /v2/file/manifests/latest
									.--> tag or digest		[cc] start with only digest
									|
				   	GET /v2/${name}/manifests/{reference}

				Accept: application/json
				Accept: application/vnd.oci.image.manifest.v1+json
				Accept: application/vnd.oci.image.index.v1+json
				Accept: application/vnd.docker.distribution.manifest.v2+json
				Accept: application/vnd.docker.distribution.manifest.list.v2+json
				Accept: application/vnd.docker.distribution.manifest.v1+prettyjws
				Accept-Encoding: gzip

					<- 200 OK
					Content-Length: 523
					Content-Type: application/vnd.docker.distribution.manifest.v2+json
					Docker-Content-Digest: sha256:7422e18d69adca5354c08f92dd18192fa142eda4cc891d093f22edbb38c4de1b ----+-->  any response MAY include a Docker-Content-Digest header
					Docker-Distribution-Api-Version: registry/2.0							   |
					Etag: "sha256:7422e18d69adca5354c08f92dd18192fa142eda4cc891d093f22edbb38c4de1b"		           *-->  For blobs, this is the entire blob content. 
					           												 For manifests, this is the manifest body without the signature content, 
																		 also known as the JWS payload


						{
						   "schemaVersion": 2,
						   "mediaType": "application/vnd.docker.distribution.manifest.v2+json",
						   "config": {
						      "mediaType": "application/vnd.docker.container.image.v1+json",
						      "size": 1192,
						      "digest": "sha256:ffb7f1f129f1af63aa06ed2950dc649e46a6953823d7d77a0cd1b89721045a8c"
						   },
						   "layers": [
						      {
							 "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
							 "size": 93,
							 "digest": "sha256:f4f156284cbb2d01008e438261ecfd88b6b766698510149d08d8aa8894765596"
						      }
						   ]
						}


										digest      := algorithm ":" hex
										algorithm   := /[A-Fa-f0-9_+.-]+/
										hex         := /[A-Fa-f0-9]+/
							digest: serialized hash result, consisting of a algorithm and hex portion
						      .---------------------------------------------------------------------.	 compliant implementations SHOULD use sha256.
						      |									    |		[cc]: assume only sha256, otherwise, fail
				-> GET /v2/file/blobs/sha256:f4f156284cbb2d01008e438261ecfd88b6b766698510149d08d8aa8894765596 HTTP/1.1

					<- 200 OK
					Accept-Ranges: bytes
					Cache-Control: max-age=31536000
					Content-Length: 93
					Content-Type: application/octet-stream
					Docker-Content-Digest: sha256:f4f156284cbb2d01008e438261ecfd88b6b766698510149d08d8aa8894765596
					Docker-Distribution-Api-Version: registry/2.0
					Etag: "sha256:f4f156284cbb2d01008e438261ecfd88b6b766698510149d08d8aa8894765596"

						.. content (layer)


				-> GET /v2/file/blobs/sha256:ffb7f1f129f1af63aa06ed2950dc649e46a6953823d7d77a0cd1b89721045a8c HTTP/1.1

					<- 200 OK
					Accept-Ranges: bytes
					Cache-Control: max-age=31536000
					Content-Length: 1192
					Content-Type: application/octet-stream
					Docker-Content-Digest: sha256:ffb7f1f129f1af63aa06ed2950dc649e46a6953823d7d77a0cd1b89721045a8c
					Docker-Distribution-Api-Version: registry/2.0
					Etag: "sha256:ffb7f1f129f1af63aa06ed2950dc649e46a6953823d7d77a0cd1b89721045a8c"
					X-Content-Type-Options: nosniff

						{ image config }



	DOCKER SAVEd IMAGES

	TAR

		.
		├── 48e2eeb489...5f3b684306703d17ffd50ecd34a.json --> image configuration
		├── 4dc05cb02b...10575f2a399094f704d14913a7d	   .-
		│   ├── VERSION					   |   LAYER
		│   ├── json    				   |	
		│   └── layer.tar    				   *-
		├── manifest.json				  --> image manifest
		└── repositories				  (tagging + image name configuration)


	IN THE FS

		(blobstore)
		.
		│
		├── bucket
		│   ├── sha256:sha256(manifest_generated)		(manifest)
		│   └── sha256:4dc0.......				(layer)
		│   └── sha256:48e2eeb489...				(config)
		│ 
		└── manifests
		    └── library
		        └─ nginx
		            ├── latest -> ../../bucket/sha256:sha256(manifest_generated)
		            └── sha256:sha256(manifest_generated) --> ../../bucket/sha256:sha256(manifest_generated)


	CONVERSION:
		
		1. parse manifest.json

		2. from `config` --> move file from tar location to blobstore with the right name

			let config_file_name = basename(config_file_path);
			let config_digest = config_file_name.split(".").take_first();

			move_file(config_file_path, blobstore.bucket_path(config_digest))	
			move_file(config_file_path, blobstore.blobs_path(config_digest))	



		3. for each layer, move file from tar location to blobstore with the right name

			let layer_digest = dirname(location);
			let bucket_path = blobstore.bucket_path(layer_digest);	

			move_file(layer_file_path, bucket_path);


		4. create a registry manifest




	manifest.json

		[
		  {
		    "Config": "48e2eeb489cdea15786d3622270750508d7385f3b684306703d17ffd50ecd34a.json",
		    "RepoTags": [
		      "a:latest"   --> tagged info  TODO: how to use this for something useful?
		    ],
		    "Layers": [
		      "4dc05cb02b54b373232011f781f8a98905d3e10575f2a399094f704d14913a7d/layer.tar" --> " within the tar, here's where you find the layer
		    ]
		  }
		]

			--> then, the newly formed digest:

		{
			"schemaVersion": 2,
			"config": {
				"mediaType": "application/vnd.oci.image.config.v1+json",
				"size": <computed>,
				"digest": "sha256:48e2eeb489cdea15786d3622270750508d7385f3b684306703d17ffd50ecd34a"
			},
			"layers": [
				{
					"mediaType": "application/vnd.oci.image.layer.v1.tar",   // maybe we don't 
					"size": <computed>,
					"digest": "sha256:4dc..."
				}
			],
			"annotations": { }
		}

			--> this newly formed manifest will have a *different* digest, which should be
			    returned to the user in order to be consumed from k8s/docker.



